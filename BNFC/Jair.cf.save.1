
--definicição program
Program.        Prog                  ::= "program" Ident ";" Dec;

--definição Ide
Ident.          Id                    ::= Ident_type;
Idletter.	Ident_type	      ::= "letter";
Iddigt.		Ident_type	      ::= "digit";

--definição blocos
Block.          Dec                   ::= Label Uses Variable Type Constant "begin" Cmdlist "end.";

--definição label
Label.		Label                 ::= Ident;

--definição uses
Uses.           Uses                  ::= Ident "{" "," Ident "}" ";";

--definição var
Variable.       Variable              ::= Ident ":" Type ";";

--definição tipos
Type.           Type		      ::= Type_specifier ;
Tint.           Type_specifier        ::= "int" ;
Tfloat.         Type_specifier        ::= "float" ;
Tdouble.        Type_specifier        ::= "double" ;

--definição constante
Constant.       Constant              ::= "number" ";";

--definição comandos
Cmdlist.        Cmdlist               ::= Cmd "{" Cmd "};";
Cmd.            Cmd                   ::= Cmd_type;
Cmd_goto.	Cmd_type              ::= "goto" Label;
Cmd_assign.     Cmd_type              ::= "assign" Variable "=" Exp;
Cmd_while.      Cmd_type              ::= "while" Exp "do" Cmdlist;
Cmd_for.        Cmd_type              ::= "for" Exp Cmdlist;
Cmd_if.         Cmd_type              ::= "if" Exp "then" Cmdlist "[" "else" Cmdlist "]";
Cmd_output.     Cmd_type              ::= "Write" Exp;

--definição expreções
Ecomma.		Exp		      ::= Exp "," Exp2;
Expeq.		Exp2		      ::= Exp15 Assignment_op Exp2;
Expenq.		Exp3		      ::= Exp3 "<>" Exp4;
Expmaior.	Exp4		      ::= Exp4 ">" Exp5;
Expmtoken Unsigned ["123456789"] digit * ('u'|'U');

token Long ["123456789"] digit * ('l'|'L');

token UnsignedLong ["123456789"] digit * (('u''l')|('U''L'));

token Hexadecimal '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

token HexUnsigned '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('u'|'U');

token HexLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('l'|'L');

token HexUnsLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ (('u''l')|('U''L'));

token Octal '0'["01234567"]*;

token OctalUnsigned '0'["01234567"]*('u'|'U');

token OctalLong '0'["01234567"]* ('l'|'L');

token OctalUnsLong '0'["01234567"]* (('u''l')|('U''L'));

token CDouble (((digit+ '.')|('.' digit+))(('e'|'E') ('-')? digit+)?)|
              (digit+ ('e'|'E') ('-')? digit+)|(digit+ '.' digit+ 'E' ('-')? digit+);

token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));

token CLongDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')?
                   digit+)?('l'|'L'))|((digit+ ('e'|'E')('-')? di

--Token
token Unsigned ["123456789"] digit * ('u'|'U');

token Long ["123456789"] digit * ('l'|'L');

token UnsignedLong ["123456789"] digit * (('u''l')|('U''L'));

token Hexadecimal '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

token HexUnsigned '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('u'|'U');

token HexLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('l'|'L');

token HexUnsLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ (('u''l')|('U''L'));

token Octal '0'["01234567"]*;

token OctalUnsigned '0'["01234567"]*('u'|'U');

token OctalLong '0'["01234567"]* ('l'|'L');

token OctalUnsLong '0'["01234567"]* (('u''l')|('U''L'));

token CDouble (((digit+ '.')|('.' digit+))(('e'|'E') ('-')? digit+)?)|
              (digit+ ('e'|'E') ('-')? digit+)|(digit+ '.' digit+ 'E' ('-')? digit+);

token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));

token CLongDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')?
                   digit+)?('l'|'L'))|((digit+ ('e'|'E')('-')? digit+)('l'|'L'));

--definição procedure
Funtion.	Procedure	      ::= "Procedure" Ident "(" Variable ")" "begin" Cmdlist "end.";

--comentario
comment "//";
comment "/*" "*/";
