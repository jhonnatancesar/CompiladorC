/* -*- c -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Lexer definition for use with FLex */

%option noyywrap noinput nounput
%option reentrant bison-bridge bison-locations

/* Additional data for the lexer: a buffer for lexing string literals. */
%option extra-type="Buffer"

%top{
/* strdup was not in the ISO C standard before 6/2019 (C2x), but in POSIX 1003.1.
 * See: https://en.cppreference.com/w/c/experimental/dynamic/strdup
 * Setting _POSIX_C_SOURCE to 200809L activates strdup in string.h.
 */
#define _POSIX_C_SOURCE 200809L
}
%{
#include "Absyn.h"
#include "Bison.h"

#define initialize_lexer jair__initialize_lexer

/* BEGIN extensible string buffer */

#include "Buffer.h"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
#define literal_buffer yyextra

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED COMMENT

%%  /* Rules. */

<INITIAL>";"      	 return _SEMI;
<INITIAL>"end."      	 return _SYMB_1;
<INITIAL>"{"      	 return _LBRACE;
<INITIAL>","      	 return _COMMA;
<INITIAL>"}"      	 return _RBRACE;
<INITIAL>":"      	 return _COLON;
<INITIAL>"};"      	 return _SYMB_6;
<INITIAL>"="      	 return _EQ;
<INITIAL>"["      	 return _LBRACK;
<INITIAL>"]"      	 return _RBRACK;
<INITIAL>"?"      	 return _QUESTION;
<INITIAL>"||"      	 return _DBAR;
<INITIAL>"&&"      	 return _DAMP;
<INITIAL>"|"      	 return _BAR;
<INITIAL>"^"      	 return _CARET;
<INITIAL>"&"      	 return _AMP;
<INITIAL>"=="      	 return _DEQ;
<INITIAL>"!="      	 return _BANGEQ;
<INITIAL>"<"      	 return _LT;
<INITIAL>">"      	 return _GT;
<INITIAL>"<="      	 return _LDARROW;
<INITIAL>">="      	 return _GTEQ;
<INITIAL>"<<"      	 return _DLT;
<INITIAL>">>"      	 return _DGT;
<INITIAL>"+"      	 return _PLUS;
<INITIAL>"-"      	 return _MINUS;
<INITIAL>"*"      	 return _STAR;
<INITIAL>"/"      	 return _SLASH;
<INITIAL>"%"      	 return _PERCENT;
<INITIAL>"++"      	 return _DPLUS;
<INITIAL>"--"      	 return _DMINUS;
<INITIAL>"("      	 return _LPAREN;
<INITIAL>")"      	 return _RPAREN;
<INITIAL>"."      	 return _DOT;
<INITIAL>"->"      	 return _RARROW;
<INITIAL>"*="      	 return _STAREQ;
<INITIAL>"/="      	 return _SLASHEQ;
<INITIAL>"%="      	 return _PERCENTEQ;
<INITIAL>"+="      	 return _PLUSEQ;
<INITIAL>"-="      	 return _MINUSEQ;
<INITIAL>"<<="      	 return _DLTEQ;
<INITIAL>">>="      	 return _DGTEQ;
<INITIAL>"&="      	 return _AMPEQ;
<INITIAL>"^="      	 return _CARETEQ;
<INITIAL>"|="      	 return _BAREQ;
<INITIAL>"Procedure"      	 return _KW_Procedure;
<INITIAL>"Write"      	 return _KW_Write;
<INITIAL>"assign"      	 return _KW_assign;
<INITIAL>"begin"      	 return _KW_begin;
<INITIAL>"digit"      	 return _KW_digit;
<INITIAL>"do"      	 return _KW_do;
<INITIAL>"double"      	 return _KW_double;
<INITIAL>"else"      	 return _KW_else;
<INITIAL>"float"      	 return _KW_float;
<INITIAL>"for"      	 return _KW_for;
<INITIAL>"goto"      	 return _KW_goto;
<INITIAL>"if"      	 return _KW_if;
<INITIAL>"int"      	 return _KW_int;
<INITIAL>"letter"      	 return _KW_letter;
<INITIAL>"number"      	 return _KW_number;
<INITIAL>"program"      	 return _KW_program;
<INITIAL>"then"      	 return _KW_then;
<INITIAL>"while"      	 return _KW_while;

<INITIAL>"//"[^\n]* /* skip */; /* BNFC: comment "//" */
<INITIAL>"/*" BEGIN COMMENT;
<COMMENT>"*/" BEGIN INITIAL;
<COMMENT>.    /* skip */;
<COMMENT>[\n] /* skip */;

<INITIAL>(1|2|3|4|5|6|7|8|9){DIGIT}*(U|u)    	 yylval->_string = strdup(yytext); return T_Unsigned;
<INITIAL>(1|2|3|4|5|6|7|8|9){DIGIT}*(L|l)    	 yylval->_string = strdup(yytext); return T_Long;
<INITIAL>(1|2|3|4|5|6|7|8|9){DIGIT}*(ul|UL)    	 yylval->_string = strdup(yytext); return T_UnsignedLong;
<INITIAL>0(X|x)(A|B|C|D|E|F|a|b|c|d|e|f|{DIGIT})+    	 yylval->_string = strdup(yytext); return T_Hexadecimal;
<INITIAL>0(X|x)(A|B|C|D|E|F|a|b|c|d|e|f|{DIGIT})+(U|u)    	 yylval->_string = strdup(yytext); return T_HexUnsigned;
<INITIAL>0(X|x)(A|B|C|D|E|F|a|b|c|d|e|f|{DIGIT})+(L|l)    	 yylval->_string = strdup(yytext); return T_HexLong;
<INITIAL>0(X|x)(A|B|C|D|E|F|a|b|c|d|e|f|{DIGIT})+(ul|UL)    	 yylval->_string = strdup(yytext); return T_HexUnsLong;
<INITIAL>0(0|1|2|3|4|5|6|7)*    	 yylval->_string = strdup(yytext); return T_Octal;
<INITIAL>0(0|1|2|3|4|5|6|7)*(U|u)    	 yylval->_string = strdup(yytext); return T_OctalUnsigned;
<INITIAL>0(0|1|2|3|4|5|6|7)*(L|l)    	 yylval->_string = strdup(yytext); return T_OctalLong;
<INITIAL>0(0|1|2|3|4|5|6|7)*(ul|UL)    	 yylval->_string = strdup(yytext); return T_OctalUnsLong;
<INITIAL>({DIGIT}+\.|\.{DIGIT}+)((E|e)\-?{DIGIT}+)?|{DIGIT}+(E|e)\-?{DIGIT}+|{DIGIT}+\.{DIGIT}+E\-?{DIGIT}+    	 yylval->_string = strdup(yytext); return T_CDouble;
<INITIAL>({DIGIT}+\.{DIGIT}+|{DIGIT}+\.|\.{DIGIT}+)((E|e)\-?{DIGIT}+)?(F|f)|{DIGIT}+(E|e)\-?{DIGIT}+(F|f)    	 yylval->_string = strdup(yytext); return T_CFloat;
<INITIAL>({DIGIT}+\.{DIGIT}+|{DIGIT}+\.|\.{DIGIT}+)((E|e)\-?{DIGIT}+)?(L|l)|{DIGIT}+(E|e)\-?{DIGIT}+(L|l)    	 yylval->_string = strdup(yytext); return T_CLongDouble;
<INITIAL>"\""        	 LITERAL_BUFFER_CREATE(); BEGIN STRING;
<STRING>\\             	 BEGIN ESCAPED;
<STRING>\"             	 yylval->_string = LITERAL_BUFFER_HARVEST(); BEGIN INITIAL; return _STRING_;
<STRING>.              	 LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
<ESCAPED>f             	 LITERAL_BUFFER_APPEND_CHAR('\f'); BEGIN STRING;
<ESCAPED>n             	 LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
<ESCAPED>r             	 LITERAL_BUFFER_APPEND_CHAR('\r'); BEGIN STRING;
<ESCAPED>t             	 LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
<ESCAPED>\"            	 LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
<ESCAPED>\\            	 LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
<ESCAPED>.             	 LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
<STRING,ESCAPED><<EOF>>	 LITERAL_BUFFER_FREE(); return _ERROR_;
<INITIAL>{LETTER}{IDENT}*      	 yylval->_string = strdup(yytext); return _IDENT_;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}

