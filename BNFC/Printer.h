/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PRINTER_HEADER
#define PRINTER_HEADER

#include "Absyn.h"

/* Certain applications may improve performance by changing the buffer size */
#define BUFFER_INITIAL 2048
/* You may wish to change _L_PAREN or _R_PAREN */
#define _L_PAREN '('
#define _R_PAREN ')'

/* The following are simple heuristics for rendering terminals */
/* You may wish to change them */
void renderCC(Char c);
void renderCS(String s);
void indent(void);
void backup(void);
void onEmptyLine(void);
void removeTrailingSpaces(void);
void removeTrailingWhitespace(void);


char *printProg(Prog p);
char *printId(Id p);
char *printIdent_type(Ident_type p);
char *printDec(Dec p);
char *printLabel(Label p);
char *printUses(Uses p);
char *printVariable(Variable p);
char *printType(Type p);
char *printType_specifier(Type_specifier p);
char *printConstant(Constant p);
char *printCmdlist(Cmdlist p);
char *printCmd(Cmd p);
char *printCmd_type(Cmd_type p);
char *printExprecion(Exprecion p);
char *printExp(Exp p);
char *printProcedure(Procedure p);

void ppProg(Prog p, int i);
void ppId(Id p, int i);
void ppIdent_type(Ident_type p, int i);
void ppDec(Dec p, int i);
void ppLabel(Label p, int i);
void ppUses(Uses p, int i);
void ppVariable(Variable p, int i);
void ppType(Type p, int i);
void ppType_specifier(Type_specifier p, int i);
void ppConstant(Constant p, int i);
void ppCmdlist(Cmdlist p, int i);
void ppCmd(Cmd p, int i);
void ppCmd_type(Cmd_type p, int i);
void ppExprecion(Exprecion p, int i);
void ppExp(Exp p, int i);
void ppProcedure(Procedure p, int i);

char *showProg(Prog p);
char *showId(Id p);
char *showIdent_type(Ident_type p);
char *showDec(Dec p);
char *showLabel(Label p);
char *showUses(Uses p);
char *showVariable(Variable p);
char *showType(Type p);
char *showType_specifier(Type_specifier p);
char *showConstant(Constant p);
char *showCmdlist(Cmdlist p);
char *showCmd(Cmd p);
char *showCmd_type(Cmd_type p);
char *showExprecion(Exprecion p);
char *showExp(Exp p);
char *showProcedure(Procedure p);

void shProg(Prog p);
void shId(Id p);
void shIdent_type(Ident_type p);
void shDec(Dec p);
void shLabel(Label p);
void shUses(Uses p);
void shVariable(Variable p);
void shType(Type p);
void shType_specifier(Type_specifier p);
void shConstant(Constant p);
void shCmdlist(Cmdlist p);
void shCmd(Cmd p);
void shCmd_type(Cmd_type p);
void shExprecion(Exprecion p);
void shExp(Exp p);
void shProcedure(Procedure p);

void ppInteger(Integer n, int i);
void ppDouble(Double d, int i);
void ppChar(Char c, int i);
void ppString(String s, int i);
void ppIdent(String s, int i);
void shInteger(Integer n);
void shDouble(Double d);
void shChar(Char c);
void shString(String s);
void shIdent(String s);
void bufAppendS(const char *s);
void bufAppendC(const char c);
void bufReset(void);
void resizeBuffer(void);

#endif

