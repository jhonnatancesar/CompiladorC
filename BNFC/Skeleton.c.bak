/* File generated by the BNF Converter (bnfc 2.9.4). */

/*** Visitor Traversal Skeleton. ***/
/* This traverses the abstract syntax tree.
   To use, copy Skeleton.h and Skeleton.c to
   new files. */

#include <stdlib.h>
#include <stdio.h>

#include "Skeleton.h"

void visitProg(Prog p)
{
  switch(p->kind)
  {
  case is_Program:
    /* Code for Program Goes Here */
    visitIdent(p->u.program_.ident_);
    visitDec(p->u.program_.dec_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Prog!\n");
    exit(1);
  }
}

void visitId(Id p)
{
  switch(p->kind)
  {
  case is_Ident:
    /* Code for Ident Goes Here */
    visitIdent_type(p->u.ident_.ident_type_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Id!\n");
    exit(1);
  }
}

void visitIdent_type(Ident_type p)
{
  switch(p->kind)
  {
  case is_Idletter:
    /* Code for Idletter Goes Here */
    break;
  case is_Iddigt:
    /* Code for Iddigt Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Ident_type!\n");
    exit(1);
  }
}

void visitDec(Dec p)
{
  switch(p->kind)
  {
  case is_Block:
    /* Code for Block Goes Here */
    visitLabel(p->u.block_.label_);
    visitUses(p->u.block_.uses_);
    visitVariable(p->u.block_.variable_);
    visitType(p->u.block_.type_);
    visitConstant(p->u.block_.constant_);
    visitCmdlist(p->u.block_.cmdlist_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Dec!\n");
    exit(1);
  }
}

void visitLabel(Label p)
{
  switch(p->kind)
  {
  case is_Label:
    /* Code for Label Goes Here */
    visitIdent(p->u.label_.ident_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Label!\n");
    exit(1);
  }
}

void visitUses(Uses p)
{
  switch(p->kind)
  {
  case is_Uses:
    /* Code for Uses Goes Here */
    visitIdent(p->u.uses_.ident_1);
    visitIdent(p->u.uses_.ident_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Uses!\n");
    exit(1);
  }
}

void visitVariable(Variable p)
{
  switch(p->kind)
  {
  case is_Variable:
    /* Code for Variable Goes Here */
    visitIdent(p->u.variable_.ident_);
    visitType(p->u.variable_.type_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Variable!\n");
    exit(1);
  }
}

void visitType(Type p)
{
  switch(p->kind)
  {
  case is_Type:
    /* Code for Type Goes Here */
    visitType_specifier(p->u.type_.type_specifier_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Type!\n");
    exit(1);
  }
}

void visitType_specifier(Type_specifier p)
{
  switch(p->kind)
  {
  case is_Tint:
    /* Code for Tint Goes Here */
    break;
  case is_Tfloat:
    /* Code for Tfloat Goes Here */
    break;
  case is_Tdouble:
    /* Code for Tdouble Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Type_specifier!\n");
    exit(1);
  }
}

void visitConstant(Constant p)
{
  switch(p->kind)
  {
  case is_Constant:
    /* Code for Constant Goes Here */
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Constant!\n");
    exit(1);
  }
}

void visitCmdlist(Cmdlist p)
{
  switch(p->kind)
  {
  case is_Cmdlist:
    /* Code for Cmdlist Goes Here */
    visitCmd(p->u.cmdlist_.cmd_1);
    visitCmd(p->u.cmdlist_.cmd_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Cmdlist!\n");
    exit(1);
  }
}

void visitCmd(Cmd p)
{
  switch(p->kind)
  {
  case is_Cmd:
    /* Code for Cmd Goes Here */
    visitCmd_type(p->u.cmd_.cmd_type_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Cmd!\n");
    exit(1);
  }
}

void visitCmd_type(Cmd_type p)
{
  switch(p->kind)
  {
  case is_Cmd_goto:
    /* Code for Cmd_goto Goes Here */
    visitLabel(p->u.cmd_goto_.label_);
    break;
  case is_Cmd_assign:
    /* Code for Cmd_assign Goes Here */
    visitVariable(p->u.cmd_assign_.variable_);
    visitExprecion(p->u.cmd_assign_.exprecion_);
    break;
  case is_Cmd_while:
    /* Code for Cmd_while Goes Here */
    visitExprecion(p->u.cmd_while_.exprecion_);
    visitCmdlist(p->u.cmd_while_.cmdlist_);
    break;
  case is_Cmd_for:
    /* Code for Cmd_for Goes Here */
    visitExprecion(p->u.cmd_for_.exprecion_);
    visitCmdlist(p->u.cmd_for_.cmdlist_);
    break;
  case is_Cmd_if:
    /* Code for Cmd_if Goes Here */
    visitExprecion(p->u.cmd_if_.exprecion_);
    visitCmdlist(p->u.cmd_if_.cmdlist_1);
    visitCmdlist(p->u.cmd_if_.cmdlist_2);
    break;
  case is_Cmd_output:
    /* Code for Cmd_output Goes Here */
    visitExprecion(p->u.cmd_output_.exprecion_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Cmd_type!\n");
    exit(1);
  }
}

void visitExprecion(Exprecion p)
{
  switch(p->kind)
  {
  case is_Exprecion:
    /* Code for Exprecion Goes Here */
    visitExp(p->u.exprecion_.exp_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Exprecion!\n");
    exit(1);
  }
}

void visitExp(Exp p)
{
  switch(p->kind)
  {
  case is_Expeq:
    /* Code for Expeq Goes Here */
    visitExp(p->u.expeq_.exp_1);
    visitExp(p->u.expeq_.exp_2);
    break;
  case is_Expenq:
    /* Code for Expenq Goes Here */
    visitExp(p->u.expenq_.exp_1);
    visitExp(p->u.expenq_.exp_2);
    break;
  case is_Expmaior:
    /* Code for Expmaior Goes Here */
    visitExp(p->u.expmaior_.exp_1);
    visitExp(p->u.expmaior_.exp_2);
    break;
  case is_Expmenor:
    /* Code for Expmenor Goes Here */
    visitExp(p->u.expmenor_.exp_1);
    visitExp(p->u.expmenor_.exp_2);
    break;
  case is_Expmaioreq:
    /* Code for Expmaioreq Goes Here */
    visitExp(p->u.expmaioreq_.exp_1);
    visitExp(p->u.expmaioreq_.exp_2);
    break;
  case is_Expmenoreq:
    /* Code for Expmenoreq Goes Here */
    visitExp(p->u.expmenoreq_.exp_1);
    visitExp(p->u.expmenoreq_.exp_2);
    break;
  case is_Expadd:
    /* Code for Expadd Goes Here */
    visitExp(p->u.expadd_.exp_1);
    visitExp(p->u.expadd_.exp_2);
    break;
  case is_Expsub:
    /* Code for Expsub Goes Here */
    visitExp(p->u.expsub_.exp_1);
    visitExp(p->u.expsub_.exp_2);
    break;
  case is_Expmult:
    /* Code for Expmult Goes Here */
    visitExp(p->u.expmult_.exp_1);
    visitExp(p->u.expmult_.exp_2);
    break;
  case is_Expdiv:
    /* Code for Expdiv Goes Here */
    visitExp(p->u.expdiv_.exp_1);
    visitExp(p->u.expdiv_.exp_2);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Exp!\n");
    exit(1);
  }
}

void visitProcedure(Procedure p)
{
  switch(p->kind)
  {
  case is_Funtion:
    /* Code for Funtion Goes Here */
    visitIdent(p->u.funtion_.ident_);
    visitVariable(p->u.funtion_.variable_);
    visitCmdlist(p->u.funtion_.cmdlist_);
    break;

  default:
    fprintf(stderr, "Error: bad kind field when printing Procedure!\n");
    exit(1);
  }
}

void visitUnsigned(Unsigned p)
{
  /* Code for Unsigned Goes Here */
}
void visitLong(Long p)
{
  /* Code for Long Goes Here */
}
void visitUnsignedLong(UnsignedLong p)
{
  /* Code for UnsignedLong Goes Here */
}
void visitHexadecimal(Hexadecimal p)
{
  /* Code for Hexadecimal Goes Here */
}
void visitHexUnsigned(HexUnsigned p)
{
  /* Code for HexUnsigned Goes Here */
}
void visitHexLong(HexLong p)
{
  /* Code for HexLong Goes Here */
}
void visitHexUnsLong(HexUnsLong p)
{
  /* Code for HexUnsLong Goes Here */
}
void visitOctal(Octal p)
{
  /* Code for Octal Goes Here */
}
void visitOctalUnsigned(OctalUnsigned p)
{
  /* Code for OctalUnsigned Goes Here */
}
void visitOctalLong(OctalLong p)
{
  /* Code for OctalLong Goes Here */
}
void visitOctalUnsLong(OctalUnsLong p)
{
  /* Code for OctalUnsLong Goes Here */
}
void visitCDouble(CDouble p)
{
  /* Code for CDouble Goes Here */
}
void visitCFloat(CFloat p)
{
  /* Code for CFloat Goes Here */
}
void visitCLongDouble(CLongDouble p)
{
  /* Code for CLongDouble Goes Here */
}
void visitIdent(Ident i)
{
  /* Code for Ident Goes Here */
}
void visitInteger(Integer i)
{
  /* Code for Integer Goes Here */
}
void visitDouble(Double d)
{
  /* Code for Double Goes Here */
}
void visitChar(Char c)
{
  /* Code for Char Goes Here */
}
void visitString(String s)
{
  /* Code for String Goes Here */
}

